
#============ steps to run : otherwise it raise an exception becuase our web container not up and other container uses its environment variables 
# docker-compose run web
# docker-compose up --build





version: "3"

services:

  db:
    image: mongo
    container_name: mongo_db_container

    ports :
      - 27017:27017

    volumes:
      - ./mongodata:/var/lib/mongodb/data
  
    environment : 
    
      - MONGO_INITDB_ROOT_USERNAME=amitsingh
      - MONGO_INITDB_ROOT_PASSWORD=onorall
      - MONGO_INITDB_DATABASE=myonorall
      - MONGO_INITDB_USERNAME=amitsingh
      - MONGO_INITDB_PASSWORD=onorall


  #--------websockets---------------
  redis_websocket:
    image: "redis:alpine"  #redis
    command: redis-server
    networks:
      - nw_backend
    ports:
      - "6379:6379"




  web:
      build: .
      container_name: web
      
      networks:
        - nw_frontend
        - nw_backend

      command: >
         bash -c "python manage.py migrate --no-input &&
         python manage.py collectstatic --no-input &&
         gunicorn --bind 0.0.0.0:8000 backend.wsgi:application"
        # daphne -b 0.0.0.0 -p 8000 backend.asgi:application

      
      volumes:
        - .:/app
        - staticfiles:/app/staticfiles

      links:
        - redis_websocket
      # ports:
      #   - "8000:8000"
      expose:
        - 8000
      # use one port or expose
      image: web

      environment:
        - DEBUG=0
        - CELERY_BROKER=redis://redis:6379/0
        - CELERY_BACKEND=redis://redis:6379/0

        # not sure working or not
        
      # env_file:
      #   - ./venv
      depends_on:
        - db
        - redis


  celery:

    build: .
    container_name: celery
    command: celery -A backend worker -l INFO   # if any erro then = celery worker --app=app --loglevel=info

    volumes:
      - .:/app

    environment:
      - DEBUG=1
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0

    depends_on:
      - web
      - redis

  redis:
    image: "redis:alpine"
    



#-------asgi django for web socket-------------
  channels:
    build: .
    command: daphne -b 0.0.0.0 -p 8001 backend.asgi:application # video daphne -b 0.0.0.0 -p 8001 backend.asgi:channel_layer
    volumes:
      - .:/app

    ports:
      - "8001:8001"
    links:
      - redis_websocket



  nginx:
    build: ./nginx
    image: nginx:latest

    networks:
      - nw_frontend
      - nw_backend

    ports:
      - 80:80

    volumes:
      - ./nginx/default.conf/:/etc/nginx/conf.d/default.conf/
      - staticfiles:/home/app/staticfiles
      - media:/home/app/media



    depends_on:
      - web




#-------for next.js------------------- 4 july ------------------------
  frontend:
    build: ../onorall-frontend-gcp
    ports:
      - 3000:3000
    volumes:
    - react_build:/nextapp/build
      #- ../onorall-frontend-gcp/:/nextapp


#============ nginx for next js ==============
  reactnginx:
    image: nginx:latest
    ports:
      - 80:8080

    # i think we need to change volume of react_build
    volumes:
      - ./nginxReact/nginx-setup.conf:/etc/nginx/conf.d/default.conf:ro
      - react_build:/var/www/react

    depends_on:
      - web
      - frontend



volumes:
  mongodata:
  staticfiles:
  media:
  react_build:




networks:
  nw_frontend:
    driver: bridge
    name: n_frontend
  nw_backend:
    driver: bridge
    name: n_backend


























# getting for ocker-compose outside **
# version: "3"

# services:

#   db:
#     image: mongo
#     container_name: mongo_db_container

#     ports :
#       - 27017:27017

#     volumes:
#       - ./mongodata:/var/lib/mongodb/data
  
#     environment : 
    
#       - MONGO_INITDB_ROOT_USERNAME=amitsingh
#       - MONGO_INITDB_ROOT_PASSWORD=onorall
#       - MONGO_INITDB_DATABASE=myonorall
#       - MONGO_INITDB_USERNAME=amitsingh
#       - MONGO_INITDB_PASSWORD=onorall


#   #--------websockets---------------
#   redis_websocket:
#     image: "redis:alpine"  #redis
#     command: redis-server
#     ports:
#       - "6379:6379"




#   web:
#       build: ./django_project
#       container_name: web
      
#       command: >
#          bash -c "cd django_project && 
#          python manage.py migrate --no-input &&
#          python manage.py collectstatic --no-input &&
#          gunicorn --bind 0.0.0.0:8000 backend.wsgi:application"
#         # daphne -b 0.0.0.0 -p 8000 backend.asgi:application

      
#       volumes:
#         - .:/app
#         - staticfiles:/app/staticfiles

#       links:
#         - redis_websocket

#       # ports:
#       #   - "8000:8000"

#       expose:
#         - 8000
#       # use one port or expose


#       image: web

#       environment:
#         - DEBUG=0
#         - CELERY_BROKER=redis://redis:6379/0
#         - CELERY_BACKEND=redis://redis:6379/0


#         # not sure working or not
        
#       # env_file:
#       #   - ./venv
#       depends_on:
#         - db
#         - redis


#   celery:

#     build: ./django_project
#     container_name: celery
#     command: celery -A backend worker -l INFO   # if any erro then = celery worker --app=app --loglevel=info

#     volumes:
#       - .:/app

#     environment:
#       - DEBUG=1
#       - CELERY_BROKER=redis://redis:6379/0
#       - CELERY_BACKEND=redis://redis:6379/0

#     depends_on:
#       - web
#       - redis

#   redis:
#     image: "redis:alpine"
    






# #------websocket worker in only production
#   # worker_channels:
#   #   build: .
#   #   command: python manage.py migrate --no-input
#   #   volumes:
#   #     - .:/app
#   #   links:
#   #     - redis_websocket


# #-------asgi django for web socket-------------
#   channels:
#     build: ./django_project/
#     command: daphne -b 0.0.0.0 -p 8001 backend.asgi:application # video daphne -b 0.0.0.0 -p 8001 backend.asgi:channel_layer
#     volumes:
#       - .:/app

#     ports:
#       - "8001:8001"
#     links:
#       - redis_websocket








#   nginx:
#     restart: always
#     build: ./django_project/nginx
#     image: nginx:latest
#     # volumes:
#     #   - static:/static
#     ports:
#       - 80:80

#     volumes:
#       - ./django_project/nginx/default.conf/:/etc/nginx/conf.d/default.conf/
#       - staticfiles:/home/app/staticfiles
#       - media:/home/app/media
      


#     depends_on:
#       - web

# volumes:
#   mongodata:
#   staticfiles:
#   media:













# #---------------29 june
# version: "3"

# services:

#   db:
#     image: mongo
#     container_name: mongo_db_container

#     ports :
#       - 27017:27017

#     volumes:
#       - ./mongodata:/var/lib/mongodb/data
  
#     environment : 
    
#       - MONGO_INITDB_ROOT_USERNAME=amitsingh
#       - MONGO_INITDB_ROOT_PASSWORD=onorall
#       - MONGO_INITDB_DATABASE=myonorall
#       - MONGO_INITDB_USERNAME=amitsingh
#       - MONGO_INITDB_PASSWORD=onorall

#   web:
#       build: .
#       container_name: web
      
#       command: >
#          bash -c "python manage.py makemigrations --no-input &&
#          python manage.py migrate --no-input &&
#          python manage.py collectstatic --no-input &&
#          daphne -b 0.0.0.0 -p 8000 backend.asgi:application"

      
#       volumes:
#         - .:/app

#       ports:
#         - "8000:8000"
#       image: web

#       environment:
#         - DEBUG=1
#         - CELERY_BROKER=redis://redis:6379/0
#         - CELERY_BACKEND=redis://redis:6379/0


#         # not sure working or not
#         - CHANNEL_LAYERS= {  'default' = {  'BACKEND' = 'channels_redis.core.RedisChannelLayer'    'CONFIG' = { "hosts" = [('localhost', 6379)],   }, }, 'ROUTING' = 'ws.routing.application',  }                       
                          

#       # env_file:
#       #   - ./venv
#       depends_on:
#         - db
#         - redis


#   celery:

#     build: .
#     container_name: celery
#     command: celery -A backend worker -l INFO   # if any erro then = celery worker --app=app --loglevel=info

#     volumes:
#       - .:/app

#     environment:
#       - DEBUG=1
#       - CELERY_BROKER=redis://redis:6379/0
#       - CELERY_BACKEND=redis://redis:6379/0

#     depends_on:
#       - web
#       - redis

#   redis:
#     image: "redis:alpine"
    


#   nginx:
#     build: ./nginx
#     image: nginx:latest
#     volumes:
#       - static:/static
#     ports:
#       - 80:8000
    

#     # volumes:
#     #   - ./nginx/default.conf/:/etc/nginx/conf.d/default.conf/

#     depends_on:
#       - web

# volumes:
#   mongodata:
#   static:

















# -----------------------4 july

# version: "3"

# services:

#   db:
#     image: mongo
#     container_name: mongo_db_container

#     ports :
#       - 27017:27017

#     volumes:
#       - ./mongodata:/var/lib/mongodb/data
  
#     environment : 
    
#       - MONGO_INITDB_ROOT_USERNAME=amitsingh
#       - MONGO_INITDB_ROOT_PASSWORD=onorall
#       - MONGO_INITDB_DATABASE=myonorall
#       - MONGO_INITDB_USERNAME=amitsingh
#       - MONGO_INITDB_PASSWORD=onorall


#   #--------websockets---------------
#   redis_websocket:
#     image: "redis:alpine"  #redis
#     command: redis-server
#     ports:
#       - "6379:6379"




#   web:
#       build: .
#       container_name: web
      
#       command: >
#          bash -c "python manage.py migrate --no-input &&
#          python manage.py collectstatic --no-input &&
#          gunicorn --bind 0.0.0.0:8000 backend.wsgi:application"
#         # daphne -b 0.0.0.0 -p 8000 backend.asgi:application

      
#       volumes:
#         - .:/app
#         - staticfiles:/app/staticfiles

#       links:
#         - redis_websocket

#       # ports:
#       #   - "8000:8000"

#       expose:
#         - 8000
#       # use one port or expose


#       image: web

#       environment:
#         - DEBUG=0
#         - CELERY_BROKER=redis://redis:6379/0
#         - CELERY_BACKEND=redis://redis:6379/0


#         # not sure working or not
        
#       # env_file:
#       #   - ./venv
#       depends_on:
#         - db
#         - redis


#   celery:

#     build: .
#     container_name: celery
#     command: celery -A backend worker -l INFO   # if any erro then = celery worker --app=app --loglevel=info

#     volumes:
#       - .:/app

#     environment:
#       - DEBUG=1
#       - CELERY_BROKER=redis://redis:6379/0
#       - CELERY_BACKEND=redis://redis:6379/0

#     depends_on:
#       - web
#       - redis

#   redis:
#     image: "redis:alpine"
    






# #------websocket worker in only production
#   # worker_channels:
#   #   build: .
#   #   command: python manage.py migrate --no-input
#   #   volumes:
#   #     - .:/app
#   #   links:
#   #     - redis_websocket


# #-------asgi django for web socket-------------
#   channels:
#     build: .
#     command: daphne -b 0.0.0.0 -p 8001 backend.asgi:application # video daphne -b 0.0.0.0 -p 8001 backend.asgi:channel_layer
#     volumes:
#       - .:/app

#     ports:
#       - "8001:8001"
#     links:
#       - redis_websocket








#   nginx:
#     build: ./nginx
#     image: nginx:latest
#     # volumes:
#     #   - static:/static
#     ports:
#       - 80:80

#     volumes:
#       - ./nginx/default.conf/:/etc/nginx/conf.d/default.conf/
#       - staticfiles:/home/app/staticfiles
#       - media:/home/app/media
      


#     depends_on:
#       - web

# volumes:
#   mongodata:
#   staticfiles:
#   media:


